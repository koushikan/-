纯函数式语言  是不允许赋值操作 ,虽然 do notation可以看起来像赋值

宽松一点就就是不能有变量 像 a = 2, a = 3，这样改变a状态的操作是不允许的
像一些语言 比如java中的final 修饰 的就只能定义一次不能再被改变
用java来模拟函数式编程 要用final来做这种限制

不允许赋值操作的保护形式 就是把值放入·容器·里，不轻易的让外界接触
[a , b]在js里表示数组，且数组里有a , b 值，我们可以认为 a , b被包在[]容器里

将值包进一个容器，通常有一个叫of的方法  [].of(1)  Stream.of(1) Functor.of(1)

包在容器里的值 对外暴露则需要map方法

map = f => [x,xs] => [f(x),map(f)(xs)]

数组里的每个元素都作为f的参数 参与了f计算
所以说等于暴露给了f

map作用后的结果是 [f(a),f(b)]
[x:xs] 这样的形式对于处理递归问题是比较好的形式
x表示数组的第一个数  xs表示剩余数组成的数组

看看下面这段JS代码

const map = f => xxs => {
  const [x,...xs] = xxs
  if(xs.length <= 0) return [f(x)]
  return [].concat(f(x)).concat(map(f)(xs))
}
console.log(map(a => a * 2)([1,2]))

将数组 变成x:xs 的结构 js代码 [x,...xs] = xxs
会大大方便我们做递归运算

回顾下of 和 map

Array.of(1,2)         
     .map(a => a*2) 
 确实在表面上看不见赋值了，函数式风格就是这样的特点
 有点像写申明式的代码
 
 
在函数式语言中 将有of map的容器 称之为 Functor
后面章节会逐步详细介绍

转载注明出处


     
     
     
