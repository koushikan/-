上节提到compose 这里我们详细研究下compose，尤其是二阶函数 compose，这种套路模式要牢记，做到信手拈来

开篇我们先介绍下lambda演算
α-替换(α-conversion)  被绑定变量的名称是不重要的                                    (参数名不重要)
β-化简(β-reduction)  (\x.\y.y x)(\z.u)  \y.y(\z.u)                                (应用参数时可带入计算)
η-化简(η-conversion)  两个函数对于所有的参数得到的结果都一致，当且仅当它们是同一个函数。
                     Eta-变换 可以令λx .f x和f相互转换                              (evt => handleEvent(evt)  等价 handleEvent 反之亦成立)



compose
f3(f2(f1)) 这样的叫做函数组合  f(g(h(1)))  f.g.h 1  

compose(f,g,h)

const compose = (...funcs) => {
   return funcs.reduceRight( (f1,f2) => (...arg) => f2(f1(...arg)) )
}

一阶compose  下一函数的参数是上一函数的结果
const f1 = a => a * 1
const f2 = a => a * 2
console.log(  compose(f2,f1)(1) )    //f2(f1(1))


二阶compose  下函数的参数是上一函数传递进来的


const f1 = next => arg => next(arg * 1)
const f2 = next => arg => next(arg * 2)
const f3 = next => arg => next(arg * 3)

f2(f1) = arg => f1(arg * 2)
f3(f2(f1)) = arg1 => (arg => f1(arg * 2))(arg1 * 3)  // Beta-变换  应用参数带入计算
           = arg1 =>  f1(arg1 * 3 * 2)               // Alpha变化  参数名称不重要
           = arg  =>  f1(arg * 3 * 2)
           
           
console.log(  compose(f2,f1)(a => a)(1) )
这种二阶compose是不是很熟悉? 很多中间件模式 都采用这种套路



