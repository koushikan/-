命令式编程语言都提供赋值语句
比如 
int a = 1;
a = a + 2;

函数式编程有些不同,这种编程模型计算机运算看做是数学中函数的计算，避免了状态及变量的概念

const f = a => a

f(1)         近似于 int a = 1                    

const add2 = x => x + 2

add2(f(1))   近似于    a = a + 2;       


按照这种编程模型， 就要求函数 能够像普通变量一样能够被定义以及当做参数传递
这就是所谓函数一等公民


我们会定义很多的函数，这些函数能够方便的使用，我们会利用到函数组合，自由组合出更多合适的函数
比如上式子 add2(f(1))  可以理解为  f应用1的作用结果 作为参数 应用到add2函数上
compose(add2,f)(1)

我们也可以定义多参函数
const  multi = (a,b) => a * b
这样的函数调用需要传递两个参数,想想上面的函数组合 上层函数的作用结果应用到下一层, 就希望下一层的参数是一个，显然multi就不合适了

假设我们 定义高阶函数
const  multi = a => b => a * b
看出来区别了吗 高阶函数就是 参数是函数 或者 返回一个函数 的函数

我们定义 const multi2 = multi(2)
multi2是一个参数了 可以作为函数组合的成员了
compose(multi2,add2,f)(1)


通常都会提供curry函数，将多参函数 变成 高阶单参函数，反之有uncurry函数
compose 和 curry的详解,请继续阅读

转载注明出处作者koushikan
